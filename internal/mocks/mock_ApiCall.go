// Code generated by mockery v2.43.2. DO NOT EDIT.

//go:build integration

package slapi_mocks

import (
	context "context"
	slapi "slapi/internal"

	mock "github.com/stretchr/testify/mock"
)

// MockApiCall is an autogenerated mock type for the ApiCall type
type MockApiCall struct {
	mock.Mock
}

type MockApiCall_Expecter struct {
	mock *mock.Mock
}

func (_m *MockApiCall) EXPECT() *MockApiCall_Expecter {
	return &MockApiCall_Expecter{mock: &_m.Mock}
}

// GetUserInfo provides a mock function with given fields: ctx, options
func (_m *MockApiCall) GetUserInfo(ctx context.Context, options *slapi.AccountOptions) (*slapi.UserInfo, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInfo")
	}

	var r0 *slapi.UserInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *slapi.AccountOptions) (*slapi.UserInfo, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *slapi.AccountOptions) *slapi.UserInfo); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*slapi.UserInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *slapi.AccountOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockApiCall_GetUserInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserInfo'
type MockApiCall_GetUserInfo_Call struct {
	*mock.Call
}

// GetUserInfo is a helper method to define mock.On call
//   - ctx context.Context
//   - options *slapi.AccountOptions
func (_e *MockApiCall_Expecter) GetUserInfo(ctx interface{}, options interface{}) *MockApiCall_GetUserInfo_Call {
	return &MockApiCall_GetUserInfo_Call{Call: _e.mock.On("GetUserInfo", ctx, options)}
}

func (_c *MockApiCall_GetUserInfo_Call) Run(run func(ctx context.Context, options *slapi.AccountOptions)) *MockApiCall_GetUserInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*slapi.AccountOptions))
	})
	return _c
}

func (_c *MockApiCall_GetUserInfo_Call) Return(_a0 *slapi.UserInfo, _a1 error) *MockApiCall_GetUserInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockApiCall_GetUserInfo_Call) RunAndReturn(run func(context.Context, *slapi.AccountOptions) (*slapi.UserInfo, error)) *MockApiCall_GetUserInfo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockApiCall creates a new instance of MockApiCall. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockApiCall(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockApiCall {
	mock := &MockApiCall{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
